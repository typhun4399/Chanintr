import os
import pandas as pd
import time
import datetime
import tkinter as tk
from tkinter import filedialog
from selenium import webdriver
from selenium.webdriver.common.by import By
from selenium.webdriver.chrome.options import Options
from selenium.webdriver.support.ui import WebDriverWait
from selenium.webdriver.support import expected_conditions as EC
from selenium.common.exceptions import TimeoutException

log_desktop_path = os.path.join(os.path.expanduser('~'), 'Desktop')
log_file_path = os.path.join(log_desktop_path, 'upload_automation_log.txt')

def get_inputs():
    def browse_excel():
        path = filedialog.askopenfilename(
            filetypes=[("Excel or CSV files", "*.xlsx *.xls *.csv"), ("All files", "*.*")]
        )
        excel_entry.delete(0, tk.END)
        excel_entry.insert(0, path)

    def browse_folder():
        path = filedialog.askdirectory()
        folder_entry.delete(0, tk.END)
        folder_entry.insert(0, path)

    def submit():
        nonlocal email, password, excel_path, folder_path
        # --- ‡∏Ñ‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• Hardcode ‡πÑ‡∏ß‡πâ‡∏ï‡∏≤‡∏°‡∏ó‡∏µ‡πà‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£ ---
        email = email_entry
        password = password_entry
        excel_path = excel_entry
        folder_path = folder_entry
        root.destroy()

    email = password = excel_path = folder_path = ""

    root = tk.Tk()
    root.title("‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤ Selenium Upload")

    tk.Label(root, text="Email:").grid(row=0, column=0, sticky="e", padx=5, pady=5)
    email_entry = tk.Entry(root, width=40)
    email_entry.grid(row=0, column=1, padx=5, pady=5)

    tk.Label(root, text="Password:").grid(row=1, column=0, sticky="e", padx=5, pady=5)
    password_entry = tk.Entry(root, width=40, show="*")
    password_entry.grid(row=1, column=1, padx=5, pady=5)

    tk.Label(root, text="Excel/CSV Path:").grid(row=2, column=0, sticky="e", padx=5, pady=5)
    excel_entry = tk.Entry(root, width=40)
    excel_entry.grid(row=2, column=1, padx=5, pady=5)
    tk.Button(root, text="Browse", command=browse_excel).grid(row=2, column=2, padx=5, pady=5)

    tk.Label(root, text="Folder Path:").grid(row=3, column=0, sticky="e", padx=5, pady=5)
    folder_entry = tk.Entry(root, width=40)
    folder_entry.grid(row=3, column=1, padx=5, pady=5)
    tk.Button(root, text="Browse", command=browse_folder).grid(row=3, column=2, padx=5, pady=5)

    tk.Button(root, text="‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ó‡∏≥‡∏á‡∏≤‡∏ô", command=submit).grid(row=4, column=0, columnspan=3, pady=10)

    root.mainloop()
    return email, password, excel_path, folder_path

email, password, excel_path, base_folder = get_inputs()

if not all([email, password, excel_path, base_folder]):
    print("‚ùå‡πÉ‡∏™‡πà‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÑ‡∏°‡πà‡∏Ñ‡∏£‡∏ö‡∏ñ‡πâ‡∏ß‡∏ô")
    exit()

if excel_path.lower().endswith(".csv"):
    df = pd.read_csv(excel_path)
else:
    df = pd.read_excel(excel_path)
ids = df['id'].dropna().astype(int).astype(str).tolist()

# ‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤ Selenium
chrome_options = Options()
chrome_options.add_argument("--start-maximized")
driver = webdriver.Chrome(options=chrome_options)
wait = WebDriverWait(driver, 20)

# ‡∏•‡πá‡∏≠‡∏Å‡∏≠‡∏¥‡∏ô Google
try:
    driver.get("https://accounts.google.com/v3/signin/identifier?continue=https%3A%2F%2Fwww.google.com%2F%3Fhl%3Dth&ec=futura_exp_og_so_72776762_e&hl=th&ifkv=AdBytiPWkA-lXJsnK3T4TFbRSkqmZxItIQFbyepCsUhuk_btQR3u5Qa1JFOnV4NX_lT1FiQ7KM9JyQ&passive=true&flowName=GlifWebSignIn&flowEntry=ServiceLogin&dsh=S539092489%3A1755489428343508")
    email_input = wait.until(EC.element_to_be_clickable((By.XPATH, "//input[@type='email']")))
    email_input.clear()
    email_input.send_keys(email)
    driver.find_element(By.ID, "identifierNext").click()
    password_input = wait.until(EC.element_to_be_clickable((By.XPATH, "//input[@type='password']")))
    password_input.clear()
    password_input.send_keys(password)
    driver.find_element(By.ID, "passwordNext").click()
    print("‚úÖ ‡∏•‡πá‡∏≠‡∏Å‡∏≠‡∏¥‡∏ô‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à")
    time.sleep(5)
except Exception as e:
    print(f"‚ùå ‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡∏£‡∏∞‡∏´‡∏ß‡πà‡∏≤‡∏á‡∏Å‡∏≤‡∏£‡∏•‡πá‡∏≠‡∏Å‡∏≠‡∏¥‡∏ô: {e}")
    driver.quit()
    exit()

base_url = "https://console.cloud.google.com/storage/browser/chanintr-2d3d/production/{};tab=objects"
for id_value in ids:
    
    log_messages_for_this_id = []

    target_folders = [f for f in os.listdir(base_folder) if f.split('_')[0] == id_value and os.path.isdir(os.path.join(base_folder, f))]
    if not target_folders:
        message = f"‚ùå ‡πÑ‡∏°‡πà‡∏û‡∏ö‡πÇ‡∏ü‡∏•‡πÄ‡∏î‡∏≠‡∏£‡πå‡∏´‡∏•‡∏±‡∏Å‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö id {id_value}"
        print(message)
        log_messages_for_this_id.append(message)
        continue

    url = base_url.format(id_value)
    message = f"\nüåê ‡πÄ‡∏õ‡∏¥‡∏î URL: {url}"
    print(message)
    log_messages_for_this_id.append(message)
    driver.get(url)
    
    time.sleep(5) 

    try:
        no_rows_xpath = "//td[contains(text(),'No rows to display')]"
        cell = wait.until(EC.presence_of_element_located((By.XPATH, no_rows_xpath)))
        cell_text = cell.text.strip()
    except:
        cell_text = ""

    if cell_text == "No rows to display":
        message = f"üìÇ Bucket {id_value} ‡∏ß‡πà‡∏≤‡∏á ‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏≠‡∏±‡∏õ‡πÇ‡∏´‡∏•‡∏î"
        print(message)
        log_messages_for_this_id.append(message)

        for folder_name in target_folders:
            folder_path = os.path.join(base_folder, folder_name)
            subfolders = [sf for sf in os.listdir(folder_path) if os.path.isdir(os.path.join(folder_path, sf))]
            
            if not subfolders:
                message = f"‚ö†Ô∏è ‡πÑ‡∏°‡πà‡∏°‡∏µ‡πÇ‡∏ü‡∏•‡πÄ‡∏î‡∏≠‡∏£‡πå‡∏¢‡πà‡∏≠‡∏¢‡πÉ‡∏ô {folder_path}"
                print(message)
                log_messages_for_this_id.append(message) 
                continue

            for sf in subfolders:
                time.sleep(1)
                full_path = os.path.join(folder_path, sf)
                message = f"‚¨ÜÔ∏è ‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏≠‡∏±‡∏õ‡πÇ‡∏´‡∏•‡∏î: {full_path}"
                print(message)
                log_messages_for_this_id.append(message)

                try:
                    upload_input = wait.until(
                        EC.presence_of_element_located((By.CSS_SELECTOR, "input[type='file'][webkitdirectory]"))
                    )
                    upload_input.send_keys(full_path)
                    
                    # --- ‚öôÔ∏è ‡∏ï‡∏£‡∏£‡∏Å‡∏∞‡∏Å‡∏≤‡∏£‡∏£‡∏≠‡πÅ‡∏ö‡∏ö‡πÉ‡∏´‡∏°‡πà‡∏ó‡∏µ‡πà‡∏â‡∏•‡∏≤‡∏î‡∏Ç‡∏∂‡πâ‡∏ô ---
                    started_xpath = "//div[contains(text(),'Upload started')]"
                    success_xpath = "//div[contains(text(),'successfully uploaded')]"

                    try:
                        # 1. ‡∏£‡∏≠‡πÉ‡∏´‡πâ‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏° "Upload started" ‡πÅ‡∏™‡∏î‡∏á‡∏Ç‡∏∂‡πâ‡∏ô‡∏°‡∏≤‡∏Å‡πà‡∏≠‡∏ô (‡∏£‡∏≠‡πÑ‡∏°‡πà‡πÄ‡∏Å‡∏¥‡∏ô 10 ‡∏ß‡∏¥‡∏ô‡∏≤‡∏ó‡∏µ)
                        upload_started_wait = WebDriverWait(driver, 20)
                        upload_started_wait.until(EC.presence_of_element_located((By.XPATH, started_xpath)))
                        
                        # 2. ‡πÄ‡∏°‡∏∑‡πà‡∏≠‡∏Å‡∏≤‡∏£‡∏≠‡∏±‡∏õ‡πÇ‡∏´‡∏•‡∏î‡πÄ‡∏£‡∏¥‡πà‡∏°‡πÅ‡∏•‡πâ‡∏ß ‡πÉ‡∏´‡πâ‡∏£‡∏≠‡∏à‡∏ô‡∏Å‡∏ß‡πà‡∏≤‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏° "Upload started" ‡∏à‡∏∞ "‡∏´‡∏≤‡∏¢‡πÑ‡∏õ" (‡∏£‡∏≠‡∏™‡∏π‡∏á‡∏™‡∏∏‡∏î 30 ‡∏ô‡∏≤‡∏ó‡∏µ)
                        upload_finished_wait = WebDriverWait(driver, 1800)
                        upload_finished_wait.until(EC.invisibility_of_element_located((By.XPATH, started_xpath)))
                        time.sleep(2)

                        try:
                            upload_sucsess_wait = WebDriverWait(driver, 20)
                            upload_sucsess_wait.until(EC.presence_of_element_located((By.XPATH, success_xpath)))
                            message = f"‚úÖ ‡∏≠‡∏±‡∏õ‡πÇ‡∏´‡∏•‡∏î‡πÇ‡∏ü‡∏•‡πÄ‡∏î‡∏≠‡∏£‡πå {sf} ‡πÄ‡∏™‡∏£‡πá‡∏à‡πÅ‡∏•‡πâ‡∏ß"
                            print(message)
                            log_messages_for_this_id.append(message)
                            time.sleep(2)

                        except:
                            message = f"üü° ‡πÇ‡∏ü‡∏•‡πÄ‡∏î‡∏≠‡∏£‡πå '{sf}' ‡∏ß‡πà‡∏≤‡∏á‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à (‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏¢‡∏∑‡∏ô‡∏¢‡∏±‡∏ô) ‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏Ç‡πâ‡∏≤‡∏°..."
                            print(message)
                            log_messages_for_this_id.append(message)

                    except TimeoutException:
                        message = f"üü° ‡πÇ‡∏ü‡∏•‡πÄ‡∏î‡∏≠‡∏£‡πå '{sf}' ‡∏ß‡πà‡∏≤‡∏á (‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏Å‡∏≤‡∏£‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô) ‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏Ç‡πâ‡∏≤‡∏°..."
                        print(message)
                        log_messages_for_this_id.append(message)

                except Exception as e:
                    message = f"‚ùå ‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡∏£‡∏∞‡∏´‡∏ß‡πà‡∏≤‡∏á‡∏≠‡∏±‡∏õ‡πÇ‡∏´‡∏•‡∏î '{sf}': {e}"
                    print(message)
                    log_messages_for_this_id.append(message)

    else:
        message = f"‚è© Bucket {id_value} ‡∏°‡∏µ‡πÑ‡∏ü‡∏•‡πå‡∏≠‡∏¢‡∏π‡πà‡πÅ‡∏•‡πâ‡∏ß"
        print(message)
        log_messages_for_this_id.append(message)

    with open(log_file_path, 'a', encoding='utf-8') as log_file:
        timestamp = datetime.datetime.now().strftime("%Y-%m-%d %H:%M:%S")
        log_file.write(f"--- [END OF ROW] ID: {id_value} | Time: {timestamp} ---\n")
        for msg in log_messages_for_this_id:
            log_file.write(msg.strip() + "\n")
        log_file.write("-" * 70 + "\n\n")

print("\nüéâ ‡∏Å‡∏≤‡∏£‡∏ó‡∏≥‡∏á‡∏≤‡∏ô‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î‡πÄ‡∏™‡∏£‡πá‡∏à‡∏™‡∏¥‡πâ‡∏ô")
driver.quit()