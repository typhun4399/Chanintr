import time
import pandas as pd
import undetected_chromedriver as uc
from selenium.webdriver.common.by import By
from selenium.webdriver.common.keys import Keys
from selenium.webdriver.support.ui import WebDriverWait
from selenium.webdriver.support import expected_conditions as EC
from datetime import datetime

# ---------------- CONFIG ----------------
excel_input = r"C:\Users\tanapat\Downloads\1_WWS_model id to get 2D-3D_20Aug25_updated style no.xlsx"
log_file = r"C:\Users\tanapat\Downloads\waterworks_price_log.txt"
batch_save = 10  # ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å Excel ‡∏ó‡∏∏‡∏Å 10 ‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£

# ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡πÄ‡∏Ç‡∏µ‡∏¢‡∏ô log ‡∏ó‡∏±‡πâ‡∏á console ‡πÅ‡∏•‡∏∞‡πÑ‡∏ü‡∏•‡πå
def log(msg):
    timestamp = datetime.now().strftime("%Y-%m-%d %H:%M:%S")
    line = f"[{timestamp}] {msg}"
    print(line)
    with open(log_file, "a", encoding="utf-8") as f:
        f.write(line + "\n")

# ‡∏≠‡πà‡∏≤‡∏ô‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏à‡∏≤‡∏Å‡πÑ‡∏ü‡∏•‡πå Excel
df = pd.read_excel(excel_input)
search_list = df['Style No.'].dropna().astype(str).tolist()

# ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏Ñ‡∏≠‡∏•‡∏±‡∏°‡∏ô‡πå Price ‡∏ñ‡πâ‡∏≤‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡∏°‡∏µ
if "Price" not in df.columns:
    df["Price"] = ""

# --- ‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤ Chrome Driver ---
options = uc.ChromeOptions()
options.add_argument("--start-maximized")
options.add_argument("--disable-popup-blocking")
options.add_argument("--disable-notifications")
options.add_argument("--disable-extensions")

driver = uc.Chrome(options=options)
wait = WebDriverWait(driver, 10)

def search_and_open(vid_search):
    """ ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤‡πÅ‡∏•‡∏∞‡∏Ñ‡∏•‡∏¥‡∏Å‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡πÅ‡∏£‡∏Å """
    try:
        search_box = wait.until(EC.element_to_be_clickable((By.XPATH, "//form/div[2]")))
        driver.execute_script("arguments[0].scrollIntoView(true);", search_box)
        search_box.click()
        search_input = wait.until(EC.element_to_be_clickable((By.XPATH, "//form/div[2]/input")))
        search_input.clear()
        search_input.send_keys(vid_search)
        search_input.send_keys(Keys.RETURN)
    except:
        return False

    try:
        first_item = wait.until(EC.element_to_be_clickable((By.XPATH, "//ol/li[1]/div/div[1]")))
        first_item.click()
        time.sleep(2)
        return True
    except:
        return False

try:
    for idx, vid_search in enumerate(search_list):

        # ‡∏ñ‡πâ‡∏≤‡∏°‡∏µ‡∏£‡∏≤‡∏Ñ‡∏≤‡∏≠‡∏¢‡∏π‡πà‡πÅ‡∏•‡πâ‡∏ß -> ‡∏Ç‡πâ‡∏≤‡∏°‡πÑ‡∏õ‡πÄ‡∏•‡∏¢
        if pd.notna(df.loc[idx, "Price"]) and str(df.loc[idx, "Price"]).strip() != "":
            log(f"‚è≠Ô∏è {vid_search}: ‡∏°‡∏µ‡∏£‡∏≤‡∏Ñ‡∏≤‡∏ó‡∏µ‡πà‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡πÑ‡∏ß‡πâ‡πÅ‡∏•‡πâ‡∏ß ‡∏Ç‡πâ‡∏≤‡∏°‡πÑ‡∏õ")
            continue

        driver.get("https://www.waterworks.com/us_en/")
        time.sleep(2)
        
        # ‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤‡∏Ñ‡∏£‡∏±‡πâ‡∏á‡πÅ‡∏£‡∏Å
        search_and_open(vid_search)

        # --- ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö Style No. (‡∏£‡∏≠‡∏ö‡πÅ‡∏£‡∏Å) ---
        try:
            style_element = wait.until(
                EC.visibility_of_element_located(
                    (By.XPATH, "/html/body/div[2]/main/div[3]/div/div/div[1]/div[2]/div/div/div[4]/div[3]/div[1]/div")
                )
            )
            style_text = style_element.text.strip()
        except:
            log(f"‚ö†Ô∏è {vid_search}: ‡πÑ‡∏°‡πà‡∏û‡∏ö element Style No.")
            df.loc[idx, "Price"] = "NO PRICE"
            continue

        if style_text != vid_search:
            log(f"‚ö†Ô∏è {vid_search}: ‡πÑ‡∏°‡πà‡∏ï‡∏£‡∏á‡∏Å‡∏±‡∏ö‡∏ö‡∏ô‡πÄ‡∏ß‡πá‡∏ö")
            df.loc[idx, "Price"] = "NO PRICE"

        # --- ‡∏î‡∏∂‡∏á‡∏£‡∏≤‡∏Ñ‡∏≤ ---
        price = ""
        try:
            price_element = driver.find_element(
                By.XPATH,
                    "/html/body/div[2]/main/div[3]/div/div/div[1]/div[2]/div/div/div[4]/div[1]/div/span/span[1]"
                )
            price = price_element.text.strip()
            if price:
                log(f"üí∞ {vid_search}: ‡∏£‡∏≤‡∏Ñ‡∏≤ = {price}")
            else:
                log(f"‚ö†Ô∏è {vid_search}: ‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏£‡∏≤‡∏Ñ‡∏≤")
                price = "NO PRICE"
        except:
            log(f"‚ö†Ô∏è {vid_search}: ‡πÑ‡∏°‡πà‡∏û‡∏ö element ‡∏£‡∏≤‡∏Ñ‡∏≤")
            price = "NO PRICE"

        df.loc[idx, "Price"] = price

        # --- ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å Excel ‡πÄ‡∏õ‡πá‡∏ô batch ---
        if (idx + 1) % batch_save == 0:
            try:
                df.to_excel(excel_input, index=False)
                log(f"üíæ ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å Excel batch (‡∏ñ‡∏∂‡∏á‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡∏ó‡∏µ‡πà {idx + 1})")
            except Exception as e:
                log(f"‚ùå ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å Excel ‡∏•‡πâ‡∏°‡πÄ‡∏´‡∏•‡∏ß: {e}")

    # ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏ï‡∏≠‡∏ô‡∏à‡∏ö
    df.to_excel(excel_input, index=False)
    log("‚úÖ ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏£‡∏≤‡∏Ñ‡∏≤‡∏•‡∏á Excel ‡πÄ‡∏£‡∏µ‡∏¢‡∏ö‡∏£‡πâ‡∏≠‡∏¢")

finally:
    driver.quit()
    log("üö™ ‡∏õ‡∏¥‡∏î Browser ‡πÅ‡∏•‡πâ‡∏ß")
