import os
import time
import pandas as pd
from selenium import webdriver
from selenium.webdriver.chrome.service import Service
from selenium.webdriver.chrome.options import Options
from selenium.webdriver.common.by import By
from selenium.webdriver.common.keys import Keys
from selenium.webdriver.support.ui import WebDriverWait
from selenium.webdriver.support import expected_conditions as EC
from selenium.common.exceptions import TimeoutException, NoSuchElementException, ElementClickInterceptedException, WebDriverException

excel_path = r"C:\Users\tanapat\Downloads\AUD New model id_21Aug25 (7).xlsx"
df = pd.read_excel(excel_path)

service = Service()

def create_chrome_driver_with_download_path(download_path):
    if not os.path.exists(download_path):
        os.makedirs(download_path, exist_ok=True)
        print(f"üìÇ ‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÇ‡∏ü‡∏•‡πÄ‡∏î‡∏≠‡∏£‡πå‡∏î‡∏≤‡∏ß‡∏ô‡πå‡πÇ‡∏´‡∏•‡∏î: {download_path}")

    chrome_options = Options()
    chrome_options.add_argument("--headless=new")
    chrome_options.add_argument("--start-maximized")
    chrome_options.add_experimental_option("detach", False)
    prefs = {
        "download.default_directory": download_path,
        "download.prompt_for_download": False,
        "download.directory_upgrade": True,
        "safebrowsing.enabled": True
    }
    chrome_options.add_experimental_option("prefs", prefs)
    driver = webdriver.Chrome(service=service, options=chrome_options)
    return driver

def initial_open_site_and_click_buttons(driver):
    driver.get("https://audocph.com/")
    btn1_xpath = "/html/body/store-selector-popover/div/div/div[2]/a[2]"
    WebDriverWait(driver, 15).until(EC.element_to_be_clickable((By.XPATH, btn1_xpath))).click()
    time.sleep(2)
    btn2_xpath = "/html/body/div[1]/div/div[4]/div[1]/div/div[2]/button[4]"
    WebDriverWait(driver, 15).until(EC.element_to_be_clickable((By.XPATH, btn2_xpath))).click()
    time.sleep(2)

def open_search_modal_and_clear_input(driver):
    search_btn_xpath = "//summary[@aria-label='Search']"
    search_btn = WebDriverWait(driver, 15).until(EC.element_to_be_clickable((By.XPATH, search_btn_xpath)))
    aria_expanded = search_btn.get_attribute("aria-expanded")
    if aria_expanded != "true":
        driver.execute_script("arguments[0].click();", search_btn)
        time.sleep(1)
    search_input = WebDriverWait(driver, 15).until(EC.element_to_be_clickable((By.ID, "Search-In-Modal")))
    search_input.clear()
    time.sleep(0.5)
    return search_input

def click_accordion_summary(driver):
    try:
        # ‡∏£‡∏≠ h2 ‡∏î‡πâ‡∏ß‡∏¢‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏° "Additional resources"
        summary_h2 = WebDriverWait(driver, 10).until(
            EC.presence_of_element_located((By.XPATH, "//h2[contains(text(), 'Additional resources')]"))
        )

        # ‡πÑ‡∏õ‡∏´‡∏≤ element summary ‡∏à‡∏≤‡∏Å h2
        summary_element = summary_h2.find_element(By.XPATH, "./ancestor::summary")

        driver.execute_script("arguments[0].scrollIntoView({block: 'center'});", summary_element)
        time.sleep(0.5)
        driver.execute_script("arguments[0].click();", summary_element)
        print("‚úÖ ‡∏Å‡∏î Accordion summary (Additional resources) ‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à")
        time.sleep(1)
        return True
    except TimeoutException:
        print("‚ö†Ô∏è ‡πÑ‡∏°‡πà‡∏û‡∏ö Accordion summary ‡∏´‡∏£‡∏∑‡∏≠‡∏Å‡∏î‡πÑ‡∏°‡πà‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à")
        return False

def click_2d3d_button_and_switch_tab(driver):
    try:
        current_tabs = driver.window_handles

        # üîç ‡∏´‡∏≤ <a> ‡∏ó‡∏µ‡πà class ‡∏°‡∏µ "tab__additional-resources" ‡πÅ‡∏•‡∏∞ text ‡πÄ‡∏õ‡πá‡∏ô "2D/3D Files"
        file_link = WebDriverWait(driver, 10).until(
            EC.presence_of_element_located((
                By.XPATH,
                "//a[contains(@class, 'tab__additional-resources') and normalize-space(text())='2D/3D Files']"
            ))
        )

        # ‡∏Ñ‡∏•‡∏¥‡∏Å‡∏õ‡∏∏‡πà‡∏°
        driver.execute_script("arguments[0].scrollIntoView({block: 'center'});", file_link)
        time.sleep(0.5)
        driver.execute_script("arguments[0].click();", file_link)
        print("‚úÖ ‡∏Å‡∏î‡∏•‡∏¥‡∏á‡∏Å‡πå '2D/3D FILES' ‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à")

        # ‡∏£‡∏≠‡∏à‡∏ô‡πÅ‡∏ó‡πá‡∏ö‡πÉ‡∏´‡∏°‡πà‡πÄ‡∏õ‡∏¥‡∏î
        WebDriverWait(driver, 10).until(lambda d: len(d.window_handles) > len(current_tabs))
        new_tab = list(set(driver.window_handles) - set(current_tabs))[0]
        driver.switch_to.window(new_tab)
        print("üÜï ‡∏™‡∏•‡∏±‡∏ö‡πÑ‡∏õ‡∏¢‡∏±‡∏á‡πÅ‡∏ó‡πá‡∏ö‡πÉ‡∏´‡∏°‡πà‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏î‡∏≤‡∏ß‡∏ô‡πå‡πÇ‡∏´‡∏•‡∏î")
        time.sleep(2)
        return True

    except Exception as e:
        print(f"‚ö†Ô∏è ‡πÑ‡∏°‡πà‡πÄ‡∏à‡∏≠‡∏õ‡∏∏‡πà‡∏° '2D/3D FILES' ‡∏´‡∏£‡∏∑‡∏≠‡∏™‡∏•‡∏±‡∏ö‡πÅ‡∏ó‡πá‡∏ö‡∏•‡πâ‡∏°‡πÄ‡∏´‡∏•‡∏ß: {e}")
        return False   

def click_add_to_selection_all_2d3d_files(driver):
    try:
        WebDriverWait(driver, 10).until(EC.presence_of_all_elements_located((By.CLASS_NAME, "widget__image")))
        file_blocks = driver.find_elements(By.CLASS_NAME, "widget__image")
        count = 0

        for block in file_blocks:
            try:
                title_el = block.find_element(By.CSS_SELECTOR, "p.file_title.color--light")
                file_name = title_el.text.strip()
                if file_name.lower().endswith("2d.zip") or file_name.lower().endswith("3d.zip"):
                    add_btn = block.find_element(By.XPATH, ".//span[contains(text(), 'ADD TO SELECTION')]/ancestor::a")
                    driver.execute_script("arguments[0].scrollIntoView({block: 'center'});", add_btn)
                    time.sleep(0.5)
                    driver.execute_script("arguments[0].click();", add_btn)
                    print(f"‚ûï ‡∏Å‡∏î ADD TO SELECTION ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡πÑ‡∏ü‡∏•‡πå: {file_name}")
                    count += 1
                    time.sleep(1)
            except Exception:
                continue

        if count == 0:
            print("‚ö†Ô∏è ‡πÑ‡∏°‡πà‡∏û‡∏ö‡πÑ‡∏ü‡∏•‡πå 2D.zip ‡∏´‡∏£‡∏∑‡∏≠ 3D.zip ‡πÄ‡∏•‡∏¢")
            return False

        print(f"‚úÖ ‡∏Å‡∏î ADD TO SELECTION ‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î {count} ‡πÑ‡∏ü‡∏•‡πå 2D/3D.zip")
        return True
    except Exception as e:
        print(f"‚ùå ‡∏û‡∏ö‡∏õ‡∏±‡∏ç‡∏´‡∏≤‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏Å‡∏î ADD TO SELECTION: {e}")
        return False

def click_basket_and_download_all(driver):
    try:
        basket_btn_xpath = "/html/body/div/app-root/div/div[2]/page/div/div/block/div/div/div/column/div/widget[2]/div/basketwidget/div/div/div/div"
        WebDriverWait(driver, 10).until(EC.element_to_be_clickable((By.XPATH, basket_btn_xpath))).click()
        print("üß∫ ‡πÄ‡∏õ‡∏¥‡∏î‡∏ï‡∏∞‡∏Å‡∏£‡πâ‡∏≤")
        time.sleep(2)

        download_all_btn_xpath = "/html/body/div/app-root/div/div[2]/div/div/div/basket/page/div/div/block/div/div/div/column/div/widget[1]/div/fileselectionresultoptionswidget/div/ul/li[2]"
        WebDriverWait(driver, 10).until(EC.element_to_be_clickable((By.XPATH, download_all_btn_xpath))).click()
        print("‚¨áÔ∏è ‡∏Å‡∏î‡∏õ‡∏∏‡πà‡∏° Download All")
        time.sleep(2)

        download_btn_xpath = "/html/body/div/app-root/div/multidownload-modal/div/div/div/div[2]/div/div/span/div[4]/div[1]/a"
        WebDriverWait(driver, 10).until(EC.element_to_be_clickable((By.XPATH, download_btn_xpath))).click()
        print("üíæ ‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏î‡∏≤‡∏ß‡∏ô‡πå‡πÇ‡∏´‡∏•‡∏î‡πÑ‡∏ü‡∏•‡πå ZIP")
        return True
    except Exception as e:
        print(f"‚ùå ‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏î‡∏≥‡πÄ‡∏ô‡∏¥‡∏ô‡∏Å‡∏≤‡∏£‡∏î‡∏≤‡∏ß‡∏ô‡πå‡πÇ‡∏´‡∏•‡∏î‡πÑ‡∏î‡πâ: {e}")
        return False

def wait_download_complete(driver):
    try:
        download_status_xpath = "/html/body/div/app-root/div/multidownload-modal/div/div/div/div[2]/div/h3"
        WebDriverWait(driver, 90).until(EC.text_to_be_present_in_element((By.XPATH, download_status_xpath), "Download complete"))
        print("‚úÖ ‡∏î‡∏≤‡∏ß‡∏ô‡πå‡πÇ‡∏´‡∏•‡∏î‡πÄ‡∏™‡∏£‡πá‡∏à‡∏™‡∏°‡∏ö‡∏π‡∏£‡∏ì‡πå (‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏° 'Download complete' ‡πÅ‡∏™‡∏î‡∏á‡πÅ‡∏•‡πâ‡∏ß)")
        time.sleep(3)
        return True
    except Exception as e:
        print(f"‚ùå ‡∏£‡∏≠‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏î‡∏≤‡∏ß‡∏ô‡πå‡πÇ‡∏´‡∏•‡∏î‡πÄ‡∏™‡∏£‡πá‡∏à‡∏•‡πâ‡∏°‡πÄ‡∏´‡∏•‡∏ß: {e}")
        return False


# ===== MAIN LOOP =====
try:
    for idx, row in df.iterrows():
        product_title = str(row['product_title']).strip()
        id_value = str(row['id']).strip()
        if not product_title or not id_value:
            print(f"‚è≠Ô∏è row {idx} ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÑ‡∏°‡πà‡∏Ñ‡∏£‡∏ö (‡∏ä‡∏∑‡πà‡∏≠‡∏´‡∏£‡∏∑‡∏≠ id) ‡∏Ç‡πâ‡∏≤‡∏°‡πÑ‡∏õ")
            continue

        download_folder = os.path.join(r"D:\AUDO\2D&3D", id_value)

        print(f"üîÑ ‡∏£‡∏≠‡∏ö {idx} ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤ '{product_title}' id: {id_value}")
        print(f"üìÇ ‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤‡πÇ‡∏ü‡∏•‡πÄ‡∏î‡∏≠‡∏£‡πå‡∏î‡∏≤‡∏ß‡∏ô‡πå‡πÇ‡∏´‡∏•‡∏î‡πÄ‡∏õ‡πá‡∏ô: {download_folder}")

        try:
            driver = create_chrome_driver_with_download_path(download_folder)
            initial_open_site_and_click_buttons(driver)
        except WebDriverException as e:
            print(f"‚ùå ‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡πÄ‡∏õ‡∏¥‡∏î‡πÄ‡∏ö‡∏£‡∏≤‡∏ß‡πå‡πÄ‡∏ã‡∏≠‡∏£‡πå‡∏´‡∏£‡∏∑‡∏≠‡πÄ‡∏Ç‡πâ‡∏≤‡πÄ‡∏ß‡πá‡∏ö‡πÑ‡∏î‡πâ: {e}")
            break

        try:
            search_input = open_search_modal_and_clear_input(driver)
            search_input.send_keys(product_title)
            time.sleep(1)
            search_input.send_keys(Keys.ENTER)
            print(f"üîç ‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤: {product_title}")

            first_card = WebDriverWait(driver, 15).until(
                EC.element_to_be_clickable((By.CSS_SELECTOR, "div.card.card--standard.card--media"))
            )
            driver.execute_script("arguments[0].scrollIntoView(true);", first_card)
            time.sleep(0.5)
            first_card.click()
            print("‚úÖ ‡∏Ñ‡∏•‡∏¥‡∏Å‡∏Å‡∏≤‡∏£‡πå‡∏î‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤‡∏ä‡∏¥‡πâ‡∏ô‡πÅ‡∏£‡∏Å")

            if click_accordion_summary(driver):
                if click_2d3d_button_and_switch_tab(driver):
                    if not click_add_to_selection_all_2d3d_files(driver):
                        print("‚è© ‡∏Ç‡πâ‡∏≤‡∏°‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤‡πÄ‡∏ô‡∏∑‡πà‡∏≠‡∏á‡∏à‡∏≤‡∏Å‡πÑ‡∏°‡πà‡∏û‡∏ö‡πÑ‡∏ü‡∏•‡πå 2D.zip ‡∏´‡∏£‡∏∑‡∏≠ 3D.zip")
                        driver.close()
                        driver.switch_to.window(driver.window_handles[0])
                        continue  # ‡∏Ç‡πâ‡∏≤‡∏°‡πÑ‡∏õ‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤‡∏ñ‡∏±‡∏î‡πÑ‡∏õ

                    if click_basket_and_download_all(driver):
                        wait_download_complete(driver)

                    driver.close()
                    driver.switch_to.window(driver.window_handles[0])
                    print("üîô ‡∏Å‡∏•‡∏±‡∏ö‡πÅ‡∏ó‡πá‡∏ö‡∏´‡∏•‡∏±‡∏Å")

        except (TimeoutException, NoSuchElementException, ElementClickInterceptedException) as e:
            print(f"‚ùå row {idx} '{product_title}' ‡πÑ‡∏°‡πà‡πÄ‡∏à‡∏≠‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤‡∏´‡∏£‡∏∑‡∏≠‡πÄ‡∏Å‡∏¥‡∏î‡∏õ‡∏±‡∏ç‡∏´‡∏≤: {e}")

        finally:
            print(f"üîö ‡∏õ‡∏¥‡∏î‡πÄ‡∏ö‡∏£‡∏≤‡∏ß‡πå‡πÄ‡∏ã‡∏≠‡∏£‡πå‡∏£‡∏≠‡∏ö {idx}")
            try:
                driver.quit()
            except:
                pass

except Exception as e:
    print("‚ùå Error ‡∏ó‡∏µ‡πà‡πÑ‡∏°‡πà‡∏Ñ‡∏≤‡∏î‡∏Ñ‡∏¥‡∏î:", e)