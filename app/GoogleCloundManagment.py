import os
import pandas as pd
import time
import datetime
import tkinter as tk
from tkinter import filedialog, messagebox
from selenium import webdriver
from selenium.webdriver.common.by import By
from selenium.webdriver.chrome.options import Options
from selenium.webdriver.support.ui import WebDriverWait
from selenium.webdriver.support import expected_conditions as EC
from selenium.common.exceptions import TimeoutException, NoSuchElementException

# --- 1. ‡∏™‡πà‡∏ß‡∏ô UI ‡πÅ‡∏•‡∏∞‡∏Å‡∏≤‡∏£‡∏£‡∏±‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• ---

def get_inputs_with_mode_selection():
    
    # ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏õ‡∏∏‡πà‡∏° Browse
    def browse_excel():
        path = filedialog.askopenfilename(filetypes=[("Excel files", "*.xlsx *.xls *.csv")])
        if path:
            excel_entry.delete(0, tk.END)
            excel_entry.insert(0, path)

    def browse_folder():
        path = filedialog.askdirectory()
        if path:
            folder_entry.delete(0, tk.END)
            folder_entry.insert(0, path)

    # ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡πÄ‡∏õ‡∏¥‡∏î/‡∏õ‡∏¥‡∏î‡∏ä‡πà‡∏≠‡∏á Folder Path ‡∏ï‡∏≤‡∏°‡πÇ‡∏´‡∏°‡∏î‡∏ó‡∏µ‡πà‡πÄ‡∏•‡∏∑‡∏≠‡∏Å
    def toggle_folder_input():
        if mode_var.get() == "upload":
            folder_entry.config(state=tk.NORMAL)
            folder_browse_button.config(state=tk.NORMAL)
        elif mode_var.get() == "delete":
            folder_entry.config(state=tk.DISABLED)
            folder_browse_button.config(state=tk.DISABLED)

    # ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡πÄ‡∏°‡∏∑‡πà‡∏≠‡∏Å‡∏î‡∏õ‡∏∏‡πà‡∏° "‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ó‡∏≥‡∏á‡∏≤‡∏ô"
    def submit():
        nonlocal selected_mode, email, password, excel_path, folder_path
        
        selected_mode = mode_var.get()
        email = email_entry.get()
        password = password_entry.get()
        excel_path = excel_entry.get()
        folder_path = folder_entry.get() if selected_mode == "upload" else ""

        # ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•
        if not all([email, password, excel_path]):
            messagebox.showerror("‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÑ‡∏°‡πà‡∏Ñ‡∏£‡∏ö", "‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏Å‡∏£‡∏≠‡∏Å Email, Password, ‡πÅ‡∏•‡∏∞‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡πÑ‡∏ü‡∏•‡πå Excel")
            return
        if selected_mode == "upload" and not folder_path:
            messagebox.showerror("‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÑ‡∏°‡πà‡∏Ñ‡∏£‡∏ö", "‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡πÇ‡∏ü‡∏•‡πÄ‡∏î‡∏≠‡∏£‡πå‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡πÇ‡∏´‡∏°‡∏î Upload")
            return
            
        root.destroy()

    # ‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤‡∏ï‡∏±‡∏ß‡πÅ‡∏õ‡∏£‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö UI
    selected_mode = email = password = excel_path = folder_path = ""

    # ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏´‡∏ô‡πâ‡∏≤‡∏ï‡πà‡∏≤‡∏á‡∏´‡∏•‡∏±‡∏Å
    root = tk.Tk()
    root.title("Cloud Storage Automation")
    root.resizable(False, False)

    # --- Frame ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡πÇ‡∏´‡∏°‡∏î ---
    mode_frame = tk.Frame(root, padx=10, pady=10)
    mode_frame.pack(fill="x")
    
    mode_var = tk.StringVar(value="upload") # ‡∏Ñ‡πà‡∏≤‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô‡∏Ñ‡∏∑‡∏≠ upload
    
    tk.Label(mode_frame, text="‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡πÇ‡∏´‡∏°‡∏î‡∏Å‡∏≤‡∏£‡∏ó‡∏≥‡∏á‡∏≤‡∏ô:").pack(side="left", padx=5)
    tk.Radiobutton(mode_frame, text="‚¨ÜÔ∏è Upload", variable=mode_var, value="upload", command=toggle_folder_input).pack(side="left")
    tk.Radiobutton(mode_frame, text="üóëÔ∏è Delete", variable=mode_var, value="delete", command=toggle_folder_input).pack(side="left")

    # --- Frame ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏Å‡∏£‡∏≠‡∏Å‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• ---
    main_frame = tk.Frame(root, padx=10, pady=5)
    main_frame.pack()

    # Email
    tk.Label(main_frame, text="Email:").grid(row=0, column=0, sticky="e", padx=5, pady=5)
    email_entry = tk.Entry(main_frame, width=50)
    email_entry.grid(row=0, column=1, columnspan=2, padx=5, pady=5)

    # Password
    tk.Label(main_frame, text="Password:").grid(row=1, column=0, sticky="e", padx=5, pady=5)
    password_entry = tk.Entry(main_frame, width=50, show="*")
    password_entry.grid(row=1, column=1, columnspan=2, padx=5, pady=5)

    # Excel Path
    tk.Label(main_frame, text="Excel Path:").grid(row=2, column=0, sticky="e", padx=5, pady=5)
    excel_entry = tk.Entry(main_frame, width=50)
    excel_entry.grid(row=2, column=1, columnspan=2, padx=5, pady=5)
    tk.Button(main_frame, text="Browse...", command=browse_excel).grid(row=2, column=3, padx=5, pady=5)

    # Folder Path (‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö Upload)
    tk.Label(main_frame, text="Folder Path:").grid(row=3, column=0, sticky="e", padx=5, pady=5)
    folder_entry = tk.Entry(main_frame, width=50)
    folder_entry.grid(row=3, column=1, columnspan=2, padx=5, pady=5)
    folder_browse_button = tk.Button(main_frame, text="Browse...", command=browse_folder)
    folder_browse_button.grid(row=3, column=3, padx=5, pady=5)

    # ‡∏õ‡∏∏‡πà‡∏° Submit
    tk.Button(root, text="üöÄ ‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ó‡∏≥‡∏á‡∏≤‡∏ô", command=submit, font=("Segoe UI", 10, "bold"), bg="#4CAF50", fg="white").pack(pady=15)
    
    toggle_folder_input() # ‡πÄ‡∏£‡∏µ‡∏¢‡∏Å‡∏Ñ‡∏£‡∏±‡πâ‡∏á‡πÅ‡∏£‡∏Å‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡∏Ç‡∏≠‡∏á‡∏ä‡πà‡∏≠‡∏á Folder
    root.mainloop()
    
    return selected_mode, email, password, excel_path, folder_path

# --- 2. ‡∏™‡πà‡∏ß‡∏ô‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏Å‡∏≤‡∏£‡∏ó‡∏≥‡∏á‡∏≤‡∏ô‡∏´‡∏•‡∏±‡∏Å (‡πÅ‡∏¢‡∏Å‡∏ï‡∏≤‡∏°‡πÇ‡∏´‡∏°‡∏î) ---

def setup_driver():
    """‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤‡πÅ‡∏•‡∏∞‡∏Ñ‡∏∑‡∏ô‡∏Ñ‡πà‡∏≤ Selenium WebDriver"""
    chrome_options = Options()
    chrome_options.add_argument("--start-maximized")
    driver = webdriver.Chrome(options=chrome_options)
    return driver

def google_login(driver, wait, email, password):
    """‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏•‡πá‡∏≠‡∏Å‡∏≠‡∏¥‡∏ô Google"""
    try:
        driver.get("https://accounts.google.com/v3/signin/identifier?continue=https%3A%2F%2Fwww.google.com%2F%3Fhl%3Dth&ec=futura_exp_og_so_72776762_e&hl=th&ifkv=AdBytiPWkA-lXJsnK3T4TFbRSkqmZxItIQFbyepCsUhuk_btQR3u5Qa1JFOnV4NX_lT1FiQ7KM9JyQ&passive=true&flowName=GlifWebSignIn&flowEntry=ServiceLogin&dsh=S539092489%3A1755489428343508")
        email_input = wait.until(EC.element_to_be_clickable((By.XPATH, "//input[@type='email']")))
        email_input.clear()
        email_input.send_keys(email)
        driver.find_element(By.ID, "identifierNext").click()
        password_input = wait.until(EC.element_to_be_clickable((By.XPATH, "//input[@type='password']")))
        password_input.clear()
        password_input.send_keys(password)
        driver.find_element(By.ID, "passwordNext").click()
        print("‚úÖ ‡∏•‡πá‡∏≠‡∏Å‡∏≠‡∏¥‡∏ô‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à")
        time.sleep(5)
        return True
    except Exception as e:
        print(f"‚ùå ‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡∏£‡∏∞‡∏´‡∏ß‡πà‡∏≤‡∏á‡∏Å‡∏≤‡∏£‡∏•‡πá‡∏≠‡∏Å‡∏≠‡∏¥‡∏ô: {e}")
        return False

def write_log(id_value, messages):
    """‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å Log"""
    log_desktop_path = os.path.join(os.path.expanduser('~'), 'Desktop')
    log_file_path = os.path.join(log_desktop_path, 'Cloud Storage Automation.txt')
    with open(log_file_path, 'a', encoding='utf-8') as log_file:
        timestamp = datetime.datetime.now().strftime("%Y-%m-%d %H:%M:%S")
        log_file.write(f"--- [ID: {id_value}] | Time: {timestamp} ---\n")
        for msg in messages:
            log_file.write(msg.strip() + "\n")
        log_file.write("-" * 70 + "\n\n")

# --- ‡πÇ‡∏´‡∏°‡∏î UPLOAD ---
def run_upload_mode(email, password, excel_path, base_folder):
    print("\n--- ‚¨ÜÔ∏è ‡πÄ‡∏£‡∏¥‡πà‡∏°‡πÇ‡∏´‡∏°‡∏î UPLOAD ---")
    driver = setup_driver()
    wait = WebDriverWait(driver, 20)

    if not google_login(driver, wait, email, password):
        driver.quit()
        return

    df = pd.read_excel(excel_path) if excel_path.lower().endswith(('.xlsx', '.xls')) else pd.read_csv(excel_path)
    ids = df['id'].dropna().astype(int).astype(str).tolist()
    
    base_url = "https://console.cloud.google.com/storage/browser/chanintr-2d3d/production/{};tab=objects"

    for id_value in ids:
        log_messages = []
        target_folders = [f for f in os.listdir(base_folder) if f.startswith(id_value + '_') and os.path.isdir(os.path.join(base_folder, f))]
        
        if not target_folders:
            msg = f"‚ùå ‡πÑ‡∏°‡πà‡∏û‡∏ö‡πÇ‡∏ü‡∏•‡πÄ‡∏î‡∏≠‡∏£‡πå‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö id {id_value}"
            print(msg)
            log_messages.append(msg)
            write_log(id_value, log_messages)
            continue
            
        url = base_url.format(id_value)
        msg = f"\nüåê ‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö URL: {url}"
        print(msg)
        log_messages.append(msg)
        driver.get(url)
        time.sleep(5)

        try:
            driver.find_element(By.XPATH, "//td[contains(text(),'No rows to display')]")
            is_empty = True
        except NoSuchElementException:
            is_empty = False

        if is_empty:
            msg = f"üìÇ Bucket {id_value} ‡∏ß‡πà‡∏≤‡∏á ‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏≠‡∏±‡∏õ‡πÇ‡∏´‡∏•‡∏î"
            print(msg)
            log_messages.append(msg)
            for folder_name in target_folders:
                folder_path = os.path.join(base_folder, folder_name)
                subfolders = [sf for sf in os.listdir(folder_path) if os.path.isdir(os.path.join(folder_path, sf))]
                if not subfolders:
                    msg = f"‚ö†Ô∏è ‡πÑ‡∏°‡πà‡∏°‡∏µ‡πÇ‡∏ü‡∏•‡πÄ‡∏î‡∏≠‡∏£‡πå‡∏¢‡πà‡∏≠‡∏¢‡πÉ‡∏ô {folder_path}"
                    print(msg)
                    log_messages.append(msg)
                    continue
                for sf in subfolders:
                    full_path = os.path.join(folder_path, sf)
                    msg = f"‚¨ÜÔ∏è ‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏≠‡∏±‡∏õ‡πÇ‡∏´‡∏•‡∏î: {full_path}"
                    print(msg)
                    log_messages.append(msg)
                    try:
                        upload_input = wait.until(EC.presence_of_element_located((By.CSS_SELECTOR, "input[type='file'][webkitdirectory]")))
                        upload_input.send_keys(full_path)
                        
                        started_xpath = "//div[contains(text(),'Upload started')]"
                        success_xpath = "//div[contains(text(),'successfully uploaded')]"

                        try:
                            WebDriverWait(driver, 20).until(EC.presence_of_element_located((By.XPATH, started_xpath)))
                            WebDriverWait(driver, 1800).until(EC.invisibility_of_element_located((By.XPATH, started_xpath)))
                            time.sleep(2)
                            WebDriverWait(driver, 20).until(EC.presence_of_element_located((By.XPATH, success_xpath)))
                            msg = f"‚úÖ ‡∏≠‡∏±‡∏õ‡πÇ‡∏´‡∏•‡∏î {sf} ‡πÄ‡∏™‡∏£‡πá‡∏à‡πÅ‡∏•‡πâ‡∏ß"
                            print(msg)
                            log_messages.append(msg)
                        except TimeoutException:
                            msg = f"üü° ‡πÇ‡∏ü‡∏•‡πÄ‡∏î‡∏≠‡∏£‡πå '{sf}' ‡∏ß‡πà‡∏≤‡∏á ‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏Å‡∏≤‡∏£‡∏¢‡∏∑‡∏ô‡∏¢‡∏±‡∏ô"
                            print(msg)
                            log_messages.append(msg)
                    except Exception as e:
                        msg = f"‚ùå ‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡∏£‡∏∞‡∏´‡∏ß‡πà‡∏≤‡∏á‡∏≠‡∏±‡∏õ‡πÇ‡∏´‡∏•‡∏î '{sf}': {e}"
                        print(msg)
                        log_messages.append(msg)
        else:
            msg = f"‚è© Bucket {id_value} ‡∏°‡∏µ‡πÑ‡∏ü‡∏•‡πå‡∏≠‡∏¢‡∏π‡πà‡πÅ‡∏•‡πâ‡∏ß"
            print(msg)
            log_messages.append(msg)
            
        write_log(id_value, log_messages)

    print("\nüéâ ‡πÇ‡∏´‡∏°‡∏î Upload ‡∏ó‡∏≥‡∏á‡∏≤‡∏ô‡πÄ‡∏™‡∏£‡πá‡∏à‡∏™‡∏¥‡πâ‡∏ô")
    driver.quit()

# --- ‡πÇ‡∏´‡∏°‡∏î DELETE ---
def run_delete_mode(email, password, excel_path):
    print("\n--- üóëÔ∏è ‡πÄ‡∏£‡∏¥‡πà‡∏°‡πÇ‡∏´‡∏°‡∏î DELETE ---")
    driver = setup_driver()
    wait = WebDriverWait(driver, 20)

    if not google_login(driver, wait, email, password):
        driver.quit()
        return

    df = pd.read_excel(excel_path) if excel_path.lower().endswith(('.xlsx', '.xls')) else pd.read_csv(excel_path)
    ids = df['id'].dropna().astype(int).astype(str).tolist()
    
    base_url = "https://console.cloud.google.com/storage/browser/chanintr-2d3d/production/{};tab=objects"

    for id_value in ids:
        log_messages = [] # << ‡∏ö‡∏£‡∏£‡∏ó‡∏±‡∏î‡∏ó‡∏µ‡πà 1: ‡πÄ‡∏ï‡∏£‡∏µ‡∏¢‡∏°‡∏•‡∏¥‡∏™‡∏ï‡πå‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡πÄ‡∏Å‡πá‡∏ö Log ‡∏Ç‡∏≠‡∏á ID ‡∏ô‡∏µ‡πâ
        url = base_url.format(id_value)
        msg = f"\nüåê ‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö URL: {url}"
        print(msg)
        log_messages.append(msg) # << ‡∏ö‡∏£‡∏£‡∏ó‡∏±‡∏î‡∏ó‡∏µ‡πà 2: ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡πÅ‡∏£‡∏Å‡∏•‡∏á‡πÉ‡∏ô Log
        driver.get(url)
        time.sleep(5)

        try:
            driver.find_element(By.XPATH, "//td[contains(text(),'No rows to display')]")
            is_empty = True
        except NoSuchElementException:
            is_empty = False

        if not is_empty:
            try:
                msg = f"üóëÔ∏è ‡∏û‡∏ö‡πÑ‡∏ü‡∏•‡πå‡πÉ‡∏ô Bucket {id_value} ‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏î‡∏≥‡πÄ‡∏ô‡∏¥‡∏ô‡∏Å‡∏≤‡∏£‡∏•‡∏ö..."
                print(msg)
                log_messages.append(msg) # << ‡∏ö‡∏£‡∏£‡∏ó‡∏±‡∏î‡∏ó‡∏µ‡πà 3: ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏•‡∏á‡πÉ‡∏ô Log

                # 1. ‡∏Ñ‡∏•‡∏¥‡∏Å Checkbox ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î
                select_all_checkbox = wait.until(EC.element_to_be_clickable((By.XPATH, "//th//mat-checkbox")))
                select_all_checkbox.click()
                time.sleep(1)

                # 2. ‡∏Ñ‡∏•‡∏¥‡∏Å‡∏õ‡∏∏‡πà‡∏° Delete
                delete_button = wait.until(EC.element_to_be_clickable((By.XPATH, "//button[contains(@aria-label, 'Delete')]")))
                delete_button.click()
                time.sleep(1)

                # 3. ‡∏¢‡∏∑‡∏ô‡∏¢‡∏±‡∏ô‡∏Å‡∏≤‡∏£‡∏•‡∏ö‡πÉ‡∏ô‡∏´‡∏ô‡πâ‡∏≤‡∏ï‡πà‡∏≤‡∏á pop-up
                confirm_input = wait.until(EC.visibility_of_element_located((By.XPATH, "//input[@aria-label='Type DELETE to confirm']")))
                confirm_input.send_keys("DELETE")
                time.sleep(1)

                confirm_delete_button = wait.until(EC.element_to_be_clickable((By.XPATH, "//button/span[contains(text(), 'Delete')]/..")))
                confirm_delete_button.click()

                # ‡∏£‡∏≠‡∏à‡∏ô‡∏Å‡∏ß‡πà‡∏≤‡∏à‡∏∞‡∏Å‡∏•‡∏±‡∏ö‡∏°‡∏≤‡∏´‡∏ô‡πâ‡∏≤‡∏ß‡πà‡∏≤‡∏á
                WebDriverWait(driver, 300).until(EC.presence_of_element_located((By.XPATH, "//td[contains(text(),'No rows to display')]")))
                
                msg = f"‚úÖ ‡∏•‡∏ö‡πÑ‡∏ü‡∏•‡πå‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î‡πÉ‡∏ô Bucket {id_value} ‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à"
                print(msg)
                log_messages.append(msg) # << ‡∏ö‡∏£‡∏£‡∏ó‡∏±‡∏î‡∏ó‡∏µ‡πà 4: ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏•‡∏á‡πÉ‡∏ô Log

            except Exception as e:
                msg = f"‚ùå ‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡∏£‡∏∞‡∏´‡∏ß‡πà‡∏≤‡∏á‡∏•‡∏ö‡πÑ‡∏ü‡∏•‡πå‡πÉ‡∏ô Bucket {id_value}: {e}"
                print(msg)
                log_messages.append(msg) # << ‡∏ö‡∏£‡∏£‡∏ó‡∏±‡∏î‡∏ó‡∏µ‡πà 5: ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏° Error ‡∏•‡∏á‡πÉ‡∏ô Log
        else:
            msg = f"‚è© Bucket {id_value} ‡∏ß‡πà‡∏≤‡∏á‡∏≠‡∏¢‡∏π‡πà‡πÅ‡∏•‡πâ‡∏ß ‡πÑ‡∏°‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏î‡∏≥‡πÄ‡∏ô‡∏¥‡∏ô‡∏Å‡∏≤‡∏£"
            print(msg)
            log_messages.append(msg) # << ‡∏ö‡∏£‡∏£‡∏ó‡∏±‡∏î‡∏ó‡∏µ‡πà 6: ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏•‡∏á‡πÉ‡∏ô Log
        
        write_log(id_value, log_messages) # << ‡∏ö‡∏£‡∏£‡∏ó‡∏±‡∏î‡∏ó‡∏µ‡πà 7: ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å Log ‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î‡∏Ç‡∏≠‡∏á ID ‡∏ô‡∏µ‡πâ‡∏•‡∏á‡πÑ‡∏ü‡∏•‡πå

    print("\nüéâ ‡πÇ‡∏´‡∏°‡∏î Delete ‡∏ó‡∏≥‡∏á‡∏≤‡∏ô‡πÄ‡∏™‡∏£‡πá‡∏à‡∏™‡∏¥‡πâ‡∏ô")
    driver.quit()

# --- 3. ‡∏™‡πà‡∏ß‡∏ô‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô‡πÇ‡∏õ‡∏£‡πÅ‡∏Å‡∏£‡∏° ---
if __name__ == "__main__":
    mode, email, password, excel_path, folder_path = get_inputs_with_mode_selection()

    if mode: # ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡∏Å‡∏î "‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ó‡∏≥‡∏á‡∏≤‡∏ô" ‡πÑ‡∏°‡πà‡πÉ‡∏ä‡πà‡∏õ‡∏¥‡∏î‡∏´‡∏ô‡πâ‡∏≤‡∏ï‡πà‡∏≤‡∏á‡πÑ‡∏õ‡πÄ‡∏â‡∏¢‡πÜ
        if mode == 'upload':
            run_upload_mode(email, password, excel_path, folder_path)
        elif mode == 'delete':
            run_delete_mode(email, password, excel_path)